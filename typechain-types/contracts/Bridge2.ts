/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type WithdrawalStruct = {
  user: string;
  destination: string;
  usd: BigNumberish;
  nonce: BigNumberish;
  requestedTime: BigNumberish;
  requestedBlockNumber: BigNumberish;
  message: BytesLike;
};

export type WithdrawalStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  user: string;
  destination: string;
  usd: BigNumber;
  nonce: BigNumber;
  requestedTime: BigNumber;
  requestedBlockNumber: BigNumber;
  message: string;
};

export type SignatureStruct = {
  r: BigNumberish;
  s: BigNumberish;
  v: BigNumberish;
};

export type SignatureStructOutput = [BigNumber, BigNumber, number] & {
  r: BigNumber;
  s: BigNumber;
  v: number;
};

export type DepositWithPermitStruct = {
  user: string;
  usd: BigNumberish;
  deadline: BigNumberish;
  signature: SignatureStruct;
};

export type DepositWithPermitStructOutput = [
  string,
  BigNumber,
  BigNumber,
  SignatureStructOutput
] & {
  user: string;
  usd: BigNumber;
  deadline: BigNumber;
  signature: SignatureStructOutput;
};

export type WithdrawalRequestStruct = {
  user: string;
  destination: string;
  usd: BigNumberish;
  nonce: BigNumberish;
  signatures: SignatureStruct[];
};

export type WithdrawalRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  SignatureStructOutput[]
] & {
  user: string;
  destination: string;
  usd: BigNumber;
  nonce: BigNumber;
  signatures: SignatureStructOutput[];
};

export type ValidatorSetStruct = {
  epoch: BigNumberish;
  validators: string[];
  powers: BigNumberish[];
};

export type ValidatorSetStructOutput = [BigNumber, string[], BigNumber[]] & {
  epoch: BigNumber;
  validators: string[];
  powers: BigNumber[];
};

export type ValidatorSetUpdateRequestStruct = {
  epoch: BigNumberish;
  hotAddresses: string[];
  coldAddresses: string[];
  powers: BigNumberish[];
};

export type ValidatorSetUpdateRequestStructOutput = [
  BigNumber,
  string[],
  string[],
  BigNumber[]
] & {
  epoch: BigNumber;
  hotAddresses: string[];
  coldAddresses: string[];
  powers: BigNumber[];
};

export interface Bridge2Interface extends utils.Interface {
  functions: {
    "batchedDepositWithPermit((address,uint64,uint64,(uint256,uint256,uint8))[])": FunctionFragment;
    "batchedFinalizeWithdrawals(bytes32[])": FunctionFragment;
    "batchedRequestWithdrawals((address,address,uint64,uint64,(uint256,uint256,uint8)[])[],(uint64,address[],uint64[]))": FunctionFragment;
    "blockDurationMillis()": FunctionFragment;
    "changeBlockDurationMillis(uint64,uint64,(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "changeDisputePeriodSeconds(uint64,uint64,(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "changeLockerThreshold(uint64,uint64,(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "coldValidatorSetHash()": FunctionFragment;
    "disputePeriodSeconds()": FunctionFragment;
    "emergencyUnlock((uint64,address[],address[],uint64[]),(uint64,address[],uint64[]),(uint256,uint256,uint8)[],uint64)": FunctionFragment;
    "epoch()": FunctionFragment;
    "finalizeValidatorSetUpdate()": FunctionFragment;
    "finalizedWithdrawals(bytes32)": FunctionFragment;
    "finalizers(address)": FunctionFragment;
    "getLockersVotingLock()": FunctionFragment;
    "hotValidatorSetHash()": FunctionFragment;
    "invalidateWithdrawals(bytes32[],uint64,(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "isVotingLock(address)": FunctionFragment;
    "lockerThreshold()": FunctionFragment;
    "lockers(address)": FunctionFragment;
    "modifyFinalizer(address,bool,uint64,(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "modifyLocker(address,bool,uint64,(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "nValidators()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingValidatorSetUpdate()": FunctionFragment;
    "requestedWithdrawals(bytes32)": FunctionFragment;
    "totalValidatorPower()": FunctionFragment;
    "unvoteEmergencyLock()": FunctionFragment;
    "updateValidatorSet((uint64,address[],address[],uint64[]),(uint64,address[],uint64[]),(uint256,uint256,uint8)[])": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "usedMessages(bytes32)": FunctionFragment;
    "voteEmergencyLock()": FunctionFragment;
    "withdrawalsInvalidated(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchedDepositWithPermit"
      | "batchedFinalizeWithdrawals"
      | "batchedRequestWithdrawals"
      | "blockDurationMillis"
      | "changeBlockDurationMillis"
      | "changeDisputePeriodSeconds"
      | "changeLockerThreshold"
      | "coldValidatorSetHash"
      | "disputePeriodSeconds"
      | "emergencyUnlock"
      | "epoch"
      | "finalizeValidatorSetUpdate"
      | "finalizedWithdrawals"
      | "finalizers"
      | "getLockersVotingLock"
      | "hotValidatorSetHash"
      | "invalidateWithdrawals"
      | "isVotingLock"
      | "lockerThreshold"
      | "lockers"
      | "modifyFinalizer"
      | "modifyLocker"
      | "nValidators"
      | "paused"
      | "pendingValidatorSetUpdate"
      | "requestedWithdrawals"
      | "totalValidatorPower"
      | "unvoteEmergencyLock"
      | "updateValidatorSet"
      | "usdcToken"
      | "usedMessages"
      | "voteEmergencyLock"
      | "withdrawalsInvalidated"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchedDepositWithPermit",
    values: [DepositWithPermitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchedFinalizeWithdrawals",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchedRequestWithdrawals",
    values: [WithdrawalRequestStruct[], ValidatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "blockDurationMillis",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBlockDurationMillis",
    values: [BigNumberish, BigNumberish, ValidatorSetStruct, SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDisputePeriodSeconds",
    values: [BigNumberish, BigNumberish, ValidatorSetStruct, SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLockerThreshold",
    values: [BigNumberish, BigNumberish, ValidatorSetStruct, SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "coldValidatorSetHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputePeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnlock",
    values: [
      ValidatorSetUpdateRequestStruct,
      ValidatorSetStruct,
      SignatureStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeValidatorSetUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizedWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "finalizers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLockersVotingLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hotValidatorSetHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateWithdrawals",
    values: [BytesLike[], BigNumberish, ValidatorSetStruct, SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingLock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "modifyFinalizer",
    values: [
      string,
      boolean,
      BigNumberish,
      ValidatorSetStruct,
      SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLocker",
    values: [
      string,
      boolean,
      BigNumberish,
      ValidatorSetStruct,
      SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nValidators",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorSetUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestedWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalValidatorPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unvoteEmergencyLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidatorSet",
    values: [
      ValidatorSetUpdateRequestStruct,
      ValidatorSetStruct,
      SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteEmergencyLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsInvalidated",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchedDepositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchedFinalizeWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchedRequestWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockDurationMillis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBlockDurationMillis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDisputePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLockerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coldValidatorSetHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeValidatorSetUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalizers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockersVotingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hotValidatorSetHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVotingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyFinalizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorSetUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValidatorPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unvoteEmergencyLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteEmergencyLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsInvalidated",
    data: BytesLike
  ): Result;

  events: {
    "ChangedBlockDurationMillis(uint64)": EventFragment;
    "ChangedDisputePeriodSeconds(uint64)": EventFragment;
    "ChangedLockerThreshold(uint64)": EventFragment;
    "Deposit(address,uint64)": EventFragment;
    "FailedPermitDeposit(address,uint64,uint32)": EventFragment;
    "FailedWithdrawal(bytes32,uint32)": EventFragment;
    "FinalizedValidatorSetUpdate(uint64,bytes32,bytes32)": EventFragment;
    "FinalizedWithdrawal(address,address,uint64,uint64,bytes32)": EventFragment;
    "InvalidatedWithdrawal((address,address,uint64,uint64,uint64,uint64,bytes32))": EventFragment;
    "ModifiedFinalizer(address,bool)": EventFragment;
    "ModifiedLocker(address,bool)": EventFragment;
    "Paused(address)": EventFragment;
    "RequestedValidatorSetUpdate(uint64,bytes32,bytes32,uint64)": EventFragment;
    "RequestedWithdrawal(address,address,uint64,uint64,bytes32,uint64)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedBlockDurationMillis"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangedDisputePeriodSeconds"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedLockerThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedPermitDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedWithdrawal"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FinalizedValidatorSetUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidatedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifiedFinalizer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifiedLocker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestedValidatorSetUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ChangedBlockDurationMillisEventObject {
  newBlockDurationMillis: BigNumber;
}
export type ChangedBlockDurationMillisEvent = TypedEvent<
  [BigNumber],
  ChangedBlockDurationMillisEventObject
>;

export type ChangedBlockDurationMillisEventFilter =
  TypedEventFilter<ChangedBlockDurationMillisEvent>;

export interface ChangedDisputePeriodSecondsEventObject {
  newDisputePeriodSeconds: BigNumber;
}
export type ChangedDisputePeriodSecondsEvent = TypedEvent<
  [BigNumber],
  ChangedDisputePeriodSecondsEventObject
>;

export type ChangedDisputePeriodSecondsEventFilter =
  TypedEventFilter<ChangedDisputePeriodSecondsEvent>;

export interface ChangedLockerThresholdEventObject {
  newLockerThreshold: BigNumber;
}
export type ChangedLockerThresholdEvent = TypedEvent<
  [BigNumber],
  ChangedLockerThresholdEventObject
>;

export type ChangedLockerThresholdEventFilter =
  TypedEventFilter<ChangedLockerThresholdEvent>;

export interface DepositEventObject {
  user: string;
  usd: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FailedPermitDepositEventObject {
  user: string;
  usd: BigNumber;
  errorCode: number;
}
export type FailedPermitDepositEvent = TypedEvent<
  [string, BigNumber, number],
  FailedPermitDepositEventObject
>;

export type FailedPermitDepositEventFilter =
  TypedEventFilter<FailedPermitDepositEvent>;

export interface FailedWithdrawalEventObject {
  message: string;
  errorCode: number;
}
export type FailedWithdrawalEvent = TypedEvent<
  [string, number],
  FailedWithdrawalEventObject
>;

export type FailedWithdrawalEventFilter =
  TypedEventFilter<FailedWithdrawalEvent>;

export interface FinalizedValidatorSetUpdateEventObject {
  epoch: BigNumber;
  hotValidatorSetHash: string;
  coldValidatorSetHash: string;
}
export type FinalizedValidatorSetUpdateEvent = TypedEvent<
  [BigNumber, string, string],
  FinalizedValidatorSetUpdateEventObject
>;

export type FinalizedValidatorSetUpdateEventFilter =
  TypedEventFilter<FinalizedValidatorSetUpdateEvent>;

export interface FinalizedWithdrawalEventObject {
  user: string;
  destination: string;
  usd: BigNumber;
  nonce: BigNumber;
  message: string;
}
export type FinalizedWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  FinalizedWithdrawalEventObject
>;

export type FinalizedWithdrawalEventFilter =
  TypedEventFilter<FinalizedWithdrawalEvent>;

export interface InvalidatedWithdrawalEventObject {
  withdrawal: WithdrawalStructOutput;
}
export type InvalidatedWithdrawalEvent = TypedEvent<
  [WithdrawalStructOutput],
  InvalidatedWithdrawalEventObject
>;

export type InvalidatedWithdrawalEventFilter =
  TypedEventFilter<InvalidatedWithdrawalEvent>;

export interface ModifiedFinalizerEventObject {
  finalizer: string;
  isFinalizer: boolean;
}
export type ModifiedFinalizerEvent = TypedEvent<
  [string, boolean],
  ModifiedFinalizerEventObject
>;

export type ModifiedFinalizerEventFilter =
  TypedEventFilter<ModifiedFinalizerEvent>;

export interface ModifiedLockerEventObject {
  locker: string;
  isLocker: boolean;
}
export type ModifiedLockerEvent = TypedEvent<
  [string, boolean],
  ModifiedLockerEventObject
>;

export type ModifiedLockerEventFilter = TypedEventFilter<ModifiedLockerEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestedValidatorSetUpdateEventObject {
  epoch: BigNumber;
  hotValidatorSetHash: string;
  coldValidatorSetHash: string;
  updateTime: BigNumber;
}
export type RequestedValidatorSetUpdateEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  RequestedValidatorSetUpdateEventObject
>;

export type RequestedValidatorSetUpdateEventFilter =
  TypedEventFilter<RequestedValidatorSetUpdateEvent>;

export interface RequestedWithdrawalEventObject {
  user: string;
  destination: string;
  usd: BigNumber;
  nonce: BigNumber;
  message: string;
  requestedTime: BigNumber;
}
export type RequestedWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  RequestedWithdrawalEventObject
>;

export type RequestedWithdrawalEventFilter =
  TypedEventFilter<RequestedWithdrawalEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Bridge2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Bridge2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchedDepositWithPermit(
      deposits: DepositWithPermitStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchedFinalizeWithdrawals(
      messages: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchedRequestWithdrawals(
      withdrawalRequests: WithdrawalRequestStruct[],
      hotValidatorSet: ValidatorSetStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    blockDurationMillis(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeBlockDurationMillis(
      newBlockDurationMillis: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeDisputePeriodSeconds(
      newDisputePeriodSeconds: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeLockerThreshold(
      newLockerThreshold: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    coldValidatorSetHash(overrides?: CallOverrides): Promise<[string]>;

    disputePeriodSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyUnlock(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizeValidatorSetUpdate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    finalizers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getLockersVotingLock(overrides?: CallOverrides): Promise<[string[]]>;

    hotValidatorSetHash(overrides?: CallOverrides): Promise<[string]>;

    invalidateWithdrawals(
      messages: BytesLike[],
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isVotingLock(locker: string, overrides?: CallOverrides): Promise<[boolean]>;

    lockerThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    modifyFinalizer(
      finalizer: string,
      _isFinalizer: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    modifyLocker(
      locker: string,
      _isLocker: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingValidatorSetUpdate(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        epoch: BigNumber;
        totalValidatorPower: BigNumber;
        updateTime: BigNumber;
        updateBlockNumber: BigNumber;
        nValidators: BigNumber;
        hotValidatorSetHash: string;
        coldValidatorSetHash: string;
      }
    >;

    requestedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        user: string;
        destination: string;
        usd: BigNumber;
        nonce: BigNumber;
        requestedTime: BigNumber;
        requestedBlockNumber: BigNumber;
        message: string;
      }
    >;

    totalValidatorPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    unvoteEmergencyLock(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateValidatorSet(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeHotValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    usedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteEmergencyLock(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawalsInvalidated(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  batchedDepositWithPermit(
    deposits: DepositWithPermitStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchedFinalizeWithdrawals(
    messages: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchedRequestWithdrawals(
    withdrawalRequests: WithdrawalRequestStruct[],
    hotValidatorSet: ValidatorSetStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  blockDurationMillis(overrides?: CallOverrides): Promise<BigNumber>;

  changeBlockDurationMillis(
    newBlockDurationMillis: BigNumberish,
    nonce: BigNumberish,
    activeColdValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeDisputePeriodSeconds(
    newDisputePeriodSeconds: BigNumberish,
    nonce: BigNumberish,
    activeColdValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeLockerThreshold(
    newLockerThreshold: BigNumberish,
    nonce: BigNumberish,
    activeColdValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  coldValidatorSetHash(overrides?: CallOverrides): Promise<string>;

  disputePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyUnlock(
    newValidatorSet: ValidatorSetUpdateRequestStruct,
    activeColdValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  finalizeValidatorSetUpdate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizedWithdrawals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  finalizers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getLockersVotingLock(overrides?: CallOverrides): Promise<string[]>;

  hotValidatorSetHash(overrides?: CallOverrides): Promise<string>;

  invalidateWithdrawals(
    messages: BytesLike[],
    nonce: BigNumberish,
    activeColdValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isVotingLock(locker: string, overrides?: CallOverrides): Promise<boolean>;

  lockerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  lockers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  modifyFinalizer(
    finalizer: string,
    _isFinalizer: boolean,
    nonce: BigNumberish,
    activeValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  modifyLocker(
    locker: string,
    _isLocker: boolean,
    nonce: BigNumberish,
    activeValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nValidators(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingValidatorSetUpdate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      epoch: BigNumber;
      totalValidatorPower: BigNumber;
      updateTime: BigNumber;
      updateBlockNumber: BigNumber;
      nValidators: BigNumber;
      hotValidatorSetHash: string;
      coldValidatorSetHash: string;
    }
  >;

  requestedWithdrawals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      user: string;
      destination: string;
      usd: BigNumber;
      nonce: BigNumber;
      requestedTime: BigNumber;
      requestedBlockNumber: BigNumber;
      message: string;
    }
  >;

  totalValidatorPower(overrides?: CallOverrides): Promise<BigNumber>;

  unvoteEmergencyLock(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateValidatorSet(
    newValidatorSet: ValidatorSetUpdateRequestStruct,
    activeHotValidatorSet: ValidatorSetStruct,
    signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  usedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  voteEmergencyLock(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawalsInvalidated(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    batchedDepositWithPermit(
      deposits: DepositWithPermitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchedFinalizeWithdrawals(
      messages: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchedRequestWithdrawals(
      withdrawalRequests: WithdrawalRequestStruct[],
      hotValidatorSet: ValidatorSetStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    blockDurationMillis(overrides?: CallOverrides): Promise<BigNumber>;

    changeBlockDurationMillis(
      newBlockDurationMillis: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeDisputePeriodSeconds(
      newDisputePeriodSeconds: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeLockerThreshold(
      newLockerThreshold: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    coldValidatorSetHash(overrides?: CallOverrides): Promise<string>;

    disputePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyUnlock(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeValidatorSetUpdate(overrides?: CallOverrides): Promise<void>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalizers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getLockersVotingLock(overrides?: CallOverrides): Promise<string[]>;

    hotValidatorSetHash(overrides?: CallOverrides): Promise<string>;

    invalidateWithdrawals(
      messages: BytesLike[],
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    isVotingLock(locker: string, overrides?: CallOverrides): Promise<boolean>;

    lockerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    lockers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    modifyFinalizer(
      finalizer: string,
      _isFinalizer: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    modifyLocker(
      locker: string,
      _isLocker: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    nValidators(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingValidatorSetUpdate(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        epoch: BigNumber;
        totalValidatorPower: BigNumber;
        updateTime: BigNumber;
        updateBlockNumber: BigNumber;
        nValidators: BigNumber;
        hotValidatorSetHash: string;
        coldValidatorSetHash: string;
      }
    >;

    requestedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        user: string;
        destination: string;
        usd: BigNumber;
        nonce: BigNumber;
        requestedTime: BigNumber;
        requestedBlockNumber: BigNumber;
        message: string;
      }
    >;

    totalValidatorPower(overrides?: CallOverrides): Promise<BigNumber>;

    unvoteEmergencyLock(overrides?: CallOverrides): Promise<void>;

    updateValidatorSet(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeHotValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    usedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    voteEmergencyLock(overrides?: CallOverrides): Promise<void>;

    withdrawalsInvalidated(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ChangedBlockDurationMillis(uint64)"(
      newBlockDurationMillis?: null
    ): ChangedBlockDurationMillisEventFilter;
    ChangedBlockDurationMillis(
      newBlockDurationMillis?: null
    ): ChangedBlockDurationMillisEventFilter;

    "ChangedDisputePeriodSeconds(uint64)"(
      newDisputePeriodSeconds?: null
    ): ChangedDisputePeriodSecondsEventFilter;
    ChangedDisputePeriodSeconds(
      newDisputePeriodSeconds?: null
    ): ChangedDisputePeriodSecondsEventFilter;

    "ChangedLockerThreshold(uint64)"(
      newLockerThreshold?: null
    ): ChangedLockerThresholdEventFilter;
    ChangedLockerThreshold(
      newLockerThreshold?: null
    ): ChangedLockerThresholdEventFilter;

    "Deposit(address,uint64)"(
      user?: string | null,
      usd?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, usd?: null): DepositEventFilter;

    "FailedPermitDeposit(address,uint64,uint32)"(
      user?: null,
      usd?: null,
      errorCode?: null
    ): FailedPermitDepositEventFilter;
    FailedPermitDeposit(
      user?: null,
      usd?: null,
      errorCode?: null
    ): FailedPermitDepositEventFilter;

    "FailedWithdrawal(bytes32,uint32)"(
      message?: null,
      errorCode?: null
    ): FailedWithdrawalEventFilter;
    FailedWithdrawal(
      message?: null,
      errorCode?: null
    ): FailedWithdrawalEventFilter;

    "FinalizedValidatorSetUpdate(uint64,bytes32,bytes32)"(
      epoch?: null,
      hotValidatorSetHash?: null,
      coldValidatorSetHash?: null
    ): FinalizedValidatorSetUpdateEventFilter;
    FinalizedValidatorSetUpdate(
      epoch?: null,
      hotValidatorSetHash?: null,
      coldValidatorSetHash?: null
    ): FinalizedValidatorSetUpdateEventFilter;

    "FinalizedWithdrawal(address,address,uint64,uint64,bytes32)"(
      user?: string | null,
      destination?: null,
      usd?: null,
      nonce?: null,
      message?: null
    ): FinalizedWithdrawalEventFilter;
    FinalizedWithdrawal(
      user?: string | null,
      destination?: null,
      usd?: null,
      nonce?: null,
      message?: null
    ): FinalizedWithdrawalEventFilter;

    "InvalidatedWithdrawal((address,address,uint64,uint64,uint64,uint64,bytes32))"(
      withdrawal?: null
    ): InvalidatedWithdrawalEventFilter;
    InvalidatedWithdrawal(withdrawal?: null): InvalidatedWithdrawalEventFilter;

    "ModifiedFinalizer(address,bool)"(
      finalizer?: string | null,
      isFinalizer?: null
    ): ModifiedFinalizerEventFilter;
    ModifiedFinalizer(
      finalizer?: string | null,
      isFinalizer?: null
    ): ModifiedFinalizerEventFilter;

    "ModifiedLocker(address,bool)"(
      locker?: string | null,
      isLocker?: null
    ): ModifiedLockerEventFilter;
    ModifiedLocker(
      locker?: string | null,
      isLocker?: null
    ): ModifiedLockerEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RequestedValidatorSetUpdate(uint64,bytes32,bytes32,uint64)"(
      epoch?: null,
      hotValidatorSetHash?: null,
      coldValidatorSetHash?: null,
      updateTime?: null
    ): RequestedValidatorSetUpdateEventFilter;
    RequestedValidatorSetUpdate(
      epoch?: null,
      hotValidatorSetHash?: null,
      coldValidatorSetHash?: null,
      updateTime?: null
    ): RequestedValidatorSetUpdateEventFilter;

    "RequestedWithdrawal(address,address,uint64,uint64,bytes32,uint64)"(
      user?: string | null,
      destination?: null,
      usd?: null,
      nonce?: null,
      message?: null,
      requestedTime?: null
    ): RequestedWithdrawalEventFilter;
    RequestedWithdrawal(
      user?: string | null,
      destination?: null,
      usd?: null,
      nonce?: null,
      message?: null,
      requestedTime?: null
    ): RequestedWithdrawalEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    batchedDepositWithPermit(
      deposits: DepositWithPermitStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchedFinalizeWithdrawals(
      messages: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchedRequestWithdrawals(
      withdrawalRequests: WithdrawalRequestStruct[],
      hotValidatorSet: ValidatorSetStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    blockDurationMillis(overrides?: CallOverrides): Promise<BigNumber>;

    changeBlockDurationMillis(
      newBlockDurationMillis: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeDisputePeriodSeconds(
      newDisputePeriodSeconds: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeLockerThreshold(
      newLockerThreshold: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    coldValidatorSetHash(overrides?: CallOverrides): Promise<BigNumber>;

    disputePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyUnlock(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeValidatorSetUpdate(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLockersVotingLock(overrides?: CallOverrides): Promise<BigNumber>;

    hotValidatorSetHash(overrides?: CallOverrides): Promise<BigNumber>;

    invalidateWithdrawals(
      messages: BytesLike[],
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isVotingLock(locker: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    lockers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    modifyFinalizer(
      finalizer: string,
      _isFinalizer: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    modifyLocker(
      locker: string,
      _isLocker: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nValidators(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidatorSetUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    requestedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalValidatorPower(overrides?: CallOverrides): Promise<BigNumber>;

    unvoteEmergencyLock(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateValidatorSet(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeHotValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    usedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteEmergencyLock(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawalsInvalidated(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchedDepositWithPermit(
      deposits: DepositWithPermitStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchedFinalizeWithdrawals(
      messages: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchedRequestWithdrawals(
      withdrawalRequests: WithdrawalRequestStruct[],
      hotValidatorSet: ValidatorSetStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    blockDurationMillis(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeBlockDurationMillis(
      newBlockDurationMillis: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeDisputePeriodSeconds(
      newDisputePeriodSeconds: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeLockerThreshold(
      newLockerThreshold: BigNumberish,
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    coldValidatorSetHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputePeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyUnlock(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeValidatorSetUpdate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockersVotingLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hotValidatorSetHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateWithdrawals(
      messages: BytesLike[],
      nonce: BigNumberish,
      activeColdValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isVotingLock(
      locker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockerThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyFinalizer(
      finalizer: string,
      _isFinalizer: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    modifyLocker(
      locker: string,
      _isLocker: boolean,
      nonce: BigNumberish,
      activeValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidatorSetUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalValidatorPower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unvoteEmergencyLock(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateValidatorSet(
      newValidatorSet: ValidatorSetUpdateRequestStruct,
      activeHotValidatorSet: ValidatorSetStruct,
      signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteEmergencyLock(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawalsInvalidated(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
