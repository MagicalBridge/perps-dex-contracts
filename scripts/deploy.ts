import { ethers } from "hardhat";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";

dotenv.config();

async function main() {
  console.log("=".repeat(60));
  console.log("ÂºÄÂßãÈÉ®ÁΩ≤ Bridge2 ÂêàÁ∫¶Âà∞ Arbitrum Sepolia");
  console.log("=".repeat(60));

  // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
  const [deployer] = await ethers.getSigners();
  console.log("\nüìç ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
  
  const balance = await deployer.getBalance();
  console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.utils.formatEther(balance), "ETH");

  if (balance.isZero()) {
    console.error("\n‚ùå ÈîôËØØ: Ë¥¶Êà∑‰ΩôÈ¢ù‰∏∫Èõ∂ÔºåËØ∑ÂÖàËé∑ÂèñÊµãËØï ETH");
    console.log("Ê∞¥ÈæôÂ§¥: https://faucet.quicknode.com/arbitrum/sepolia");
    process.exit(1);
  }

  // ‰ªéÁéØÂ¢ÉÂèòÈáèËØªÂèñÊûÑÈÄ†ÂáΩÊï∞ÂèÇÊï∞
  const hotAddresses = process.env.HOT_VALIDATOR_ADDRESSES?.split(",") || [];
  const coldAddresses = process.env.COLD_VALIDATOR_ADDRESSES?.split(",") || [];
  const powers = process.env.VALIDATOR_POWERS?.split(",").map((p) => p.trim()) || [];
  const usdcAddress = process.env.USDC_ADDRESS || "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d";
  const disputePeriodSeconds = process.env.DISPUTE_PERIOD_SECONDS || "86400";
  const blockDurationMillis = process.env.BLOCK_DURATION_MILLIS || "250";
  const lockerThreshold = process.env.LOCKER_THRESHOLD || "2";

  // È™åËØÅÂèÇÊï∞
  if (hotAddresses.length === 0 || coldAddresses.length === 0) {
    console.error("\n‚ùå ÈîôËØØ: È™åËØÅËÄÖÂú∞ÂùÄÊú™ÈÖçÁΩÆ");
    console.log("ËØ∑Âú® .env Êñá‰ª∂‰∏≠ÈÖçÁΩÆ HOT_VALIDATOR_ADDRESSES Âíå COLD_VALIDATOR_ADDRESSES");
    process.exit(1);
  }

  if (hotAddresses.length !== coldAddresses.length || hotAddresses.length !== powers.length) {
    console.error("\n‚ùå ÈîôËØØ: È™åËØÅËÄÖÂú∞ÂùÄÂíåÊùÉÈáçÊï∞Èáè‰∏çÂåπÈÖç");
    console.log(`Hot Âú∞ÂùÄÊï∞: ${hotAddresses.length}`);
    console.log(`Cold Âú∞ÂùÄÊï∞: ${coldAddresses.length}`);
    console.log(`ÊùÉÈáçÊï∞: ${powers.length}`);
    process.exit(1);
  }

  console.log("\nüìã ÊûÑÈÄ†ÂáΩÊï∞ÂèÇÊï∞:");
  console.log("‚îÄ".repeat(60));
  console.log("Hot Validators:");
  hotAddresses.forEach((addr, i) => console.log(`  ${i + 1}. ${addr}`));
  console.log("\nCold Validators:");
  coldAddresses.forEach((addr, i) => console.log(`  ${i + 1}. ${addr}`));
  console.log("\nPowers:", powers.join(", "));
  console.log("USDC Address:", usdcAddress);
  console.log("Dispute Period:", disputePeriodSeconds, "seconds");
  console.log("Block Duration:", blockDurationMillis, "ms");
  console.log("Locker Threshold:", lockerThreshold);
  console.log("‚îÄ".repeat(60));

  // ÈÉ®ÁΩ≤ÂêàÁ∫¶
  console.log("\nüöÄ Ê≠£Âú®ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
  
  const Bridge2 = await ethers.getContractFactory("Bridge2");
  const bridge2 = await Bridge2.deploy(
    hotAddresses,
    coldAddresses,
    powers,
    usdcAddress,
    disputePeriodSeconds,
    blockDurationMillis,
    lockerThreshold
  );

  console.log("‚è≥ Á≠âÂæÖÂêàÁ∫¶ÈÉ®ÁΩ≤Á°ÆËÆ§...");
  await bridge2.deployed();

  console.log("\n" + "=".repeat(60));
  console.log("‚úÖ Bridge2 ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
  console.log("=".repeat(60));
  console.log("\nüìç ÂêàÁ∫¶Âú∞ÂùÄ:", bridge2.address);
  console.log("üìç ÈÉ®ÁΩ≤‰∫§Êòì:", bridge2.deployTransaction.hash);
  console.log("üìç Âå∫ÂùóÂè∑:", bridge2.deployTransaction.blockNumber);
  console.log("\nüîç Âú® Arbiscan Êü•Áúã:");
  console.log(`   https://sepolia.arbiscan.io/address/${bridge2.address}`);
  console.log("\nüîç Êü•Áúã‰∫§Êòì:");
  console.log(`   https://sepolia.arbiscan.io/tx/${bridge2.deployTransaction.hash}`);

  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  const deploymentInfo = {
    network: "arbitrumSepolia",
    chainId: 421614,
    contractAddress: bridge2.address,
    deployerAddress: deployer.address,
    transactionHash: bridge2.deployTransaction.hash,
    blockNumber: bridge2.deployTransaction.blockNumber,
    timestamp: new Date().toISOString(),
    constructorArgs: {
      hotAddresses,
      coldAddresses,
      powers,
      usdcAddress,
      disputePeriodSeconds,
      blockDurationMillis,
      lockerThreshold,
    },
  };

  const deploymentsDir = path.join(__dirname, "..", "deployments");
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }

  const deploymentFile = path.join(deploymentsDir, `Bridge2-${Date.now()}.json`);
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  
  console.log("\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞:", deploymentFile);

  // Á≠âÂæÖÂá†‰∏™Âå∫ÂùóÂêéÈ™åËØÅ
  console.log("\n‚è≥ Á≠âÂæÖ 6 ‰∏™Âå∫ÂùóÁ°ÆËÆ§ÂêéÂÜçÈ™åËØÅÂêàÁ∫¶...");
  await bridge2.deployTransaction.wait(6);

  console.log("\n‚úÖ Â∑≤Á°ÆËÆ§ 6 ‰∏™Âå∫Âùó");
  console.log("\nüìù Áé∞Âú®ÂèØ‰ª•ËøêË°åÈ™åËØÅÂëΩ‰ª§:");
  console.log(`   pnpm run verify:arbitrum-sepolia`);
  console.log("\nÊàñÊâãÂä®È™åËØÅ:");
  console.log(`   npx hardhat verify --network arbitrumSepolia ${bridge2.address} \\`);
  hotAddresses.forEach((addr) => console.log(`     "${addr}" \\`));
  console.log("     # ... ÂÖ∂‰ªñÂèÇÊï∞");

  console.log("\n" + "=".repeat(60));
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:");
    console.error(error);
    process.exit(1);
  });

